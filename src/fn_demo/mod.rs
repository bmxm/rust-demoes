// 函数参数是一种特殊变量，它是函数签名的一部分。
// Rust 要求函数参数必须明确指定数据类型，但不能指定默认值。
// 函数参数分为可变和不可变参数，默认是不可变参数。
// 当需要可变操作时，可以使用 mut 关键字。
// 函数使用逗号分隔。
// 函数只能有唯一的返回值，如果需要返回多个值，可以使用元组类型。
// Rust 中每个函数都有返回值，即使是没有显式返回值函数，也会隐式的返回一个单元值 ()。
fn add(x: i32, y :i32) -> i32 {
    // 函数体由一系列语句和一个可选的结尾表达式构成。

    x + y // 等同于 return x + y;
    // 对于流程控制结构中的循环或者条件判断分支，如果需要提前退出函数并返回指定的值，
    // 必须显式地使用 return 语句来返回。
}

#[test]
fn add_test() {
    let result = add(2, 4);
    println!("{:?}", result);
}

// 方法来自面向对象的编程范式，它表示某个类型的实例的行为。
// 结构体的方法必须在结构体的上下文中定义，也就是定义在 impl 快中。
// 但是，定义在 impl 块中的不一定是方法，有可能是关联函数。
// 方法要求第一个参数必须是 self, 它代表该方法的结构体实例。
// 在方法中使用 &self 能够读取实例中的数据，使用 &mut self 能够
// 实例中写入数据。
// 关联函数时指在 impl 块中定义，但又不以 self 作为参数的函数。
// 它与结构体相关联，但又不直接作用于结构体实例，常用作返回一个
// 结构体实例的构造函数。