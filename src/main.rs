mod string_test;
mod fn_demo;

fn main() {
    let result = if 1 == 1 {
        "hello";
    } else {
        "world";
    };

    println!("{:?}", result);

}

// 单元测试通常编写在包含被测试代码的同一模块中。
// 当这些测试的数量增加时，它们被组织成嵌套模块形式的一个实体。
// 通常在一当前模块中创建一个子模块，对该测试进行一个命名，如
// tests, 并添加相应的注释属性（#[cfg(test)]）,
// 然后将所有与测试相关的函数放入其中。
// 该属性只是告知编译器在测试模块中引用代码，但在执行 
// cargo test 命令时生效。

// 测试原语
// Rust 内置的测试框架基于一系列主要属性和宏组成的基元。
// Rust 代码中的属性主要指元素的注释

// 断言宏 
// assert! 最简单的断言宏 